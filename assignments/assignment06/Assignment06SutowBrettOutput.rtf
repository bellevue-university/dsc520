{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 > ## Set the working directory to the root of your DSC 520 directory\
> setwd("/Users/Brett/Desktop/dsc520-master")\
> \
> ## Load the `data/r4ds/heights.csv` to\
> heights_df <- read.csv("/Users/Brett/Desktop/dsc520-master/data/r4ds/heights.csv")\
> head(heights_df)\
   earn   height    sex ed age  race\
1 50000 74.42444   male 16  45 white\
2 60000 65.53754 female 16  58 white\
3 30000 63.62920 female 16  29 white\
4 50000 63.10856 female 16  91 other\
5 51000 63.40248 female 17  39 white\
6  9000 64.39951 female 15  26 white\
> earn<- heights_df[,c(1)]\
> height<- heights_df[,c(2)]\
> sex<- heights_df[,c(3)]\
> ed<- heights_df[,c(4)]\
> age<- heights_df[,c(5)]\
> race<- heights_df[,c(6)]\
> ## Load the ggplot2 library\
> library(ggplot2)\
> \
> ## Fit a linear model using the `age` variable as the predictor and `earn` as the outcome\
> age_lm <-  lm(earn ~ age, data = heights_df )\
> \
> ## View the summary of your model using `summary()`\
> summary(age_lm)\
\
Call:\
lm(formula = earn ~ age, data = heights_df)\
\
Residuals:\
   Min     1Q Median     3Q    Max \
-25098 -12622  -3667   6883 177579 \
\
Coefficients:\
            Estimate Std. Error t value Pr(>|t|)    \
(Intercept) 19041.53    1571.26  12.119  < 2e-16 ***\
age            99.41      35.46   2.804  0.00514 ** \
---\
Signif. codes:  0 \'91***\'92 0.001 \'91**\'92 0.01 \'91*\'92 0.05 \'91.\'92 0.1 \'91 \'92 1\
\
Residual standard error: 19420 on 1190 degrees of freedom\
Multiple R-squared:  0.006561,	Adjusted R-squared:  0.005727 \
F-statistic:  7.86 on 1 and 1190 DF,  p-value: 0.005137\
\
> \
> ## Creating predictions using `predict()`\
> age_predict_df <- data.frame(earn = predict(age_lm,heights_df ), age = age)\
> print(age_predict_df)\
        earn age\
1   23514.79  45\
2   24807.06  58\
3   21924.29  29\
4   28087.45  91\
5   22918.35  39\
6   21626.08  26\
7   23912.41  49\
8   23614.19  46\
9   21129.05  21\
10  21626.08  26\
11  25502.90  65\
12  22421.32  34\
13  21725.48  27\
14  24111.22  51\
15  22520.73  35\
16  24807.06  58\
17  21924.29  29\
18  23415.38  44\
19  24508.84  55\
20  22520.73  35\
21  24111.22  51\
22  21129.05  21\
23  21228.45  22\
24  23117.16  41\
25  23514.79  45\
26  22520.73  35\
27  25005.87  60\
28  22818.95  38\
29  22321.92  33\
30  21526.67  25\
31  22321.92  33\
32  22918.35  39\
33  22123.11  31\
34  21626.08  26\
35  26795.18  78\
36  22123.11  31\
37  24707.66  57\
38  21626.08  26\
39  25502.90  65\
40  22023.70  30\
41  23117.16  41\
42  21924.29  29\
43  22023.70  30\
44  21129.05  21\
45  22222.51  32\
46  21924.29  29\
47  20830.83  18\
48  24608.25  56\
49  25502.90  65\
50  23117.16  41\
51  23912.41  49\
52  25502.90  65\
53  21824.89  28\
54  22222.51  32\
55  20830.83  18\
56  24508.84  55\
57  24707.66  57\
58  21924.29  29\
59  21725.48  27\
60  21824.89  28\
61  23315.97  43\
62  25801.12  68\
63  24210.63  52\
64  22918.35  39\
65  24310.03  53\
66  21725.48  27\
67  21129.05  21\
68  22918.35  39\
69  21228.45  22\
70  25801.12  68\
71  23713.60  47\
72  25701.71  67\
73  22918.35  39\
74  22918.35  39\
75  22222.51  32\
76  22321.92  33\
77  22818.95  38\
78  21626.08  26\
79  25304.09  63\
80  25105.28  61\
81  22620.13  36\
82  21327.86  23\
83  21029.64  20\
84  22222.51  32\
85  21725.48  27\
86  21228.45  22\
87  26298.15  73\
88  24608.25  56\
89  27888.64  89\
90  26894.58  79\
91  25304.09  63\
92  25602.31  66\
93  22321.92  33\
94  22023.70  30\
95  21327.86  23\
96  23315.97  43\
97  22023.70  30\
98  22719.54  37\
99  21228.45  22\
100 23315.97  43\
101 22719.54  37\
102 23415.38  44\
103 23315.97  43\
104 22023.70  30\
105 24807.06  58\
106 23415.38  44\
107 22520.73  35\
108 23315.97  43\
109 21824.89  28\
110 22818.95  38\
111 23017.76  40\
112 21427.26  24\
113 21626.08  26\
114 21129.05  21\
115 22520.73  35\
116 22123.11  31\
117 22818.95  38\
118 22520.73  35\
119 23117.16  41\
120 22918.35  39\
121 23315.97  43\
122 23017.76  40\
123 23216.57  42\
124 25204.68  62\
125 22123.11  31\
126 26099.34  71\
127 22123.11  31\
128 22222.51  32\
129 22023.70  30\
130 25900.52  69\
131 24608.25  56\
132 23415.38  44\
133 23415.38  44\
134 24608.25  56\
135 23514.79  45\
136 24011.81  50\
137 21228.45  22\
138 21824.89  28\
139 21725.48  27\
140 21824.89  28\
141 23315.97  43\
142 21626.08  26\
143 23216.57  42\
144 22222.51  32\
145 20830.83  18\
146 25005.87  60\
147 23614.19  46\
148 22918.35  39\
149 23614.19  46\
150 23912.41  49\
151 22421.32  34\
152 25403.50  64\
153 21427.26  24\
154 22222.51  32\
155 25105.28  61\
156 23813.00  48\
157 23912.41  49\
158 22620.13  36\
159 24608.25  56\
160 22719.54  37\
161 26397.55  74\
162 23614.19  46\
163 25304.09  63\
164 25304.09  63\
165 23315.97  43\
166 21526.67  25\
167 24011.81  50\
168 23216.57  42\
169 23912.41  49\
170 22719.54  37\
171 25502.90  65\
172 24707.66  57\
173 22818.95  38\
174 23315.97  43\
175 23514.79  45\
176 23713.60  47\
177 21824.89  28\
178 23117.16  41\
179 22222.51  32\
180 23713.60  47\
181 25204.68  62\
182 22918.35  39\
183 22818.95  38\
184 22918.35  39\
185 25801.12  68\
186 24011.81  50\
187 24011.81  50\
188 24111.22  51\
189 21228.45  22\
190 26695.77  77\
191 24111.22  51\
192 22222.51  32\
193 24409.44  54\
194 21824.89  28\
195 21427.26  24\
196 23614.19  46\
197 22818.95  38\
198 23415.38  44\
199 22222.51  32\
200 22321.92  33\
201 22520.73  35\
202 24011.81  50\
203 23514.79  45\
204 22321.92  33\
205 22818.95  38\
206 22023.70  30\
207 21228.45  22\
208 23315.97  43\
209 22123.11  31\
210 21129.05  21\
211 26298.15  73\
212 22023.70  30\
213 21824.89  28\
214 21228.45  22\
215 24508.84  55\
216 22918.35  39\
217 24111.22  51\
218 23117.16  41\
219 22421.32  34\
220 25900.52  69\
221 22918.35  39\
222 25403.50  64\
223 22421.32  34\
224 25304.09  63\
225 23415.38  44\
226 22818.95  38\
227 22421.32  34\
228 22918.35  39\
229 27192.80  82\
230 22918.35  39\
231 21327.86  23\
232 22222.51  32\
233 21824.89  28\
234 23117.16  41\
235 22818.95  38\
236 22023.70  30\
237 22321.92  33\
238 25105.28  61\
239 22719.54  37\
240 21924.29  29\
241 21924.29  29\
242 21129.05  21\
243 26795.18  78\
244 21327.86  23\
245 25502.90  65\
246 21824.89  28\
247 22321.92  33\
248 21427.26  24\
249 21924.29  29\
250 23216.57  42\
251 21228.45  22\
252 24210.63  52\
253 22719.54  37\
254 21924.29  29\
255 22520.73  35\
256 23813.00  48\
257 23017.76  40\
258 21626.08  26\
259 22520.73  35\
260 21129.05  21\
261 22421.32  34\
262 21626.08  26\
263 21824.89  28\
264 22222.51  32\
265 23216.57  42\
266 25701.71  67\
267 24310.03  53\
268 24310.03  53\
269 23912.41  49\
270 24409.44  54\
271 23514.79  45\
272 21427.26  24\
273 22818.95  38\
274 21626.08  26\
275 21824.89  28\
276 22918.35  39\
277 24011.81  50\
278 21924.29  29\
279 22222.51  32\
280 21327.86  23\
281 24807.06  58\
282 22321.92  33\
283 24508.84  55\
284 22023.70  30\
285 22620.13  36\
286 25801.12  68\
287 24707.66  57\
288 22620.13  36\
289 28087.45  91\
290 22918.35  39\
291 22520.73  35\
292 23713.60  47\
293 22620.13  36\
294 25105.28  61\
295 23216.57  42\
296 22222.51  32\
297 22123.11  31\
298 22918.35  39\
299 22123.11  31\
300 20830.83  18\
301 26099.34  71\
302 22620.13  36\
303 22321.92  33\
304 21725.48  27\
305 22023.70  30\
306 23315.97  43\
307 21824.89  28\
308 23415.38  44\
309 21526.67  25\
310 22818.95  38\
311 22818.95  38\
312 21327.86  23\
313 21427.26  24\
314 23117.16  41\
315 24906.47  59\
316 25602.31  66\
317 23813.00  48\
318 25304.09  63\
319 21924.29  29\
320 24707.66  57\
321 26596.36  76\
322 21228.45  22\
323 22719.54  37\
324 22520.73  35\
325 22321.92  33\
326 25204.68  62\
327 26496.96  75\
328 23415.38  44\
329 21228.45  22\
330 23017.76  40\
331 22023.70  30\
332 22620.13  36\
333 21725.48  27\
334 21228.45  22\
335 21029.64  20\
336 21327.86  23\
337 25701.71  67\
338 25900.52  69\
339 22123.11  31\
340 23813.00  48\
341 21526.67  25\
342 25304.09  63\
343 27192.80  82\
344 27093.39  81\
345 23117.16  41\
346 22023.70  30\
347 21824.89  28\
348 26198.74  72\
349 24409.44  54\
350 24707.66  57\
351 21824.89  28\
352 22520.73  35\
353 23315.97  43\
354 26397.55  74\
355 24210.63  52\
356 22918.35  39\
357 22818.95  38\
358 22222.51  32\
359 22123.11  31\
360 22719.54  37\
361 25900.52  69\
362 23117.16  41\
363 22918.35  39\
364 22719.54  37\
365 22421.32  34\
366 22620.13  36\
367 21526.67  25\
368 21725.48  27\
369 25701.71  67\
370 21526.67  25\
371 22222.51  32\
372 22421.32  34\
373 21626.08  26\
374 22421.32  34\
375 21626.08  26\
376 22023.70  30\
377 22719.54  37\
378 22222.51  32\
379 26795.18  78\
380 21327.86  23\
381 21924.29  29\
382 22620.13  36\
383 23614.19  46\
384 24111.22  51\
385 22520.73  35\
386 23614.19  46\
387 21725.48  27\
388 22321.92  33\
389 25602.31  66\
390 23017.76  40\
391 22222.51  32\
392 26099.34  71\
393 22918.35  39\
394 26198.74  72\
395 26397.55  74\
396 26198.74  72\
397 21824.89  28\
398 22123.11  31\
399 22222.51  32\
400 26298.15  73\
401 22222.51  32\
402 22918.35  39\
403 23614.19  46\
404 21129.05  21\
405 26496.96  75\
406 23117.16  41\
407 22023.70  30\
408 23614.19  46\
409 23912.41  49\
410 26099.34  71\
411 21327.86  23\
412 21725.48  27\
413 22620.13  36\
414 23713.60  47\
415 21924.29  29\
416 21626.08  26\
417 22321.92  33\
418 24011.81  50\
419 23713.60  47\
420 23017.76  40\
421 22023.70  30\
422 23117.16  41\
423 21824.89  28\
424 21626.08  26\
425 21029.64  20\
426 25005.87  60\
427 23813.00  48\
428 21824.89  28\
429 24608.25  56\
430 23415.38  44\
431 24310.03  53\
432 21824.89  28\
433 22719.54  37\
434 24608.25  56\
435 22421.32  34\
436 23117.16  41\
437 22123.11  31\
438 23117.16  41\
439 26298.15  73\
440 23614.19  46\
441 24807.06  58\
442 23415.38  44\
443 24707.66  57\
444 24111.22  51\
445 23415.38  44\
446 21924.29  29\
447 21228.45  22\
448 21029.64  20\
449 24111.22  51\
450 21327.86  23\
451 23813.00  48\
452 23216.57  42\
453 23912.41  49\
454 21029.64  20\
455 20830.83  18\
456 24111.22  51\
457 22520.73  35\
458 22620.13  36\
459 21427.26  24\
460 22620.13  36\
461 22818.95  38\
462 25701.71  67\
463 23017.76  40\
464 24011.81  50\
465 22123.11  31\
466 21526.67  25\
467 22620.13  36\
468 21725.48  27\
469 22023.70  30\
470 21129.05  21\
471 22719.54  37\
472 21824.89  28\
473 24508.84  55\
474 23117.16  41\
475 23415.38  44\
476 22222.51  32\
477 22123.11  31\
478 25900.52  69\
479 23315.97  43\
480 22421.32  34\
481 22321.92  33\
482 21427.26  24\
483 24310.03  53\
484 23216.57  42\
485 23514.79  45\
486 25403.50  64\
487 22719.54  37\
488 22719.54  37\
489 21924.29  29\
490 20930.24  19\
491 20830.83  18\
492 23117.16  41\
493 24707.66  57\
494 25801.12  68\
495 22321.92  33\
496 26795.18  78\
497 23315.97  43\
498 22421.32  34\
499 21427.26  24\
500 21924.29  29\
 [ reached 'max' / getOption("max.print") -- omitted 692 rows ]\
> ## Plot the predictions against the original data\
> ggplot(data = age_predict_df, aes(y = earn, x = age)) +\
+   geom_point(color='blue') +\
+   geom_line(color='red',data = heights_df, aes(y=earn, x=age))\
> \
> mean_earn <- mean(heights_df$earn)\
> ## Corrected Sum of Squares Total\
> sst <- sum((mean_earn - heights_df$earn)^2)\
> ## Corrected Sum of Squares for Model\
> ssm <- sum((mean_earn - age_predict_df$earn)^2)\
> ## Residuals\
> residuals <- heights_df$earn - age_predict_df$earn\
> ## Sum of Squares for Error\
> sse <- sum(residuals^2)\
> ## R Squared R^2 = SSM\\SST\
> r_squared <- (ssm/sst)\
> \
> ## Number of observations\
> n <- nrow(heights_df)\
> ## Number of regression parameters\
> p <- 2\
> ## Corrected Degrees of Freedom for Model (p-1)\
> dfm <- p-1\
> ## Degrees of Freedom for Error (n-p)\
> dfe <- n-p\
> ## Corrected Degrees of Freedom Total:   DFT = n - 1\
> dft <- n-1\
> \
> ## Mean of Squares for Model:   MSM = SSM / DFM\
> msm <- ssm/dfm\
> ## Mean of Squares for Error:   MSE = SSE / DFE\
> mse <- sse/dfe\
> ## Mean of Squares Total:   MST = SST / DFT\
> mst <- sst/dft\
> ## F Statistic F = MSM/MSE\
> f_score <- msm/mse\
> \
> ## Adjusted R Squared R2 = 1 - (1 - R2)(n - 1) / (n - p)\
> adjusted_r_squared <- 1-(1-r_squared)*(n-1)/(n-p)\
> \
> ## Calculate the p-value from the F distribution\
> p_value <- pf(f_score, dfm, dft, lower.tail=F)}